/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for customer data and general signed-in access to other collections.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product information, secured writes.
 * - /customers/{customerId}: Customer profiles, owned by the user with the matching UID.
 * - /customers/{customerId}/sales/{saleId}: Sales transactions belonging to a specific customer, accessible only by the customer.
 * - /expenses/{expenseId}: Expenses, accessible only to signed-in users.
 * - /settings/{settingId}: Application settings, accessible only to signed-in users.
 *
 * Key Security Decisions:
 * - Products are publicly readable but require authentication for writes.
 * - Customers and their associated sales data are strictly owned by the user.
 * - Expenses and Settings require user authentication for all operations.
 * - Listing of sales is restricted to the owner (customer).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts writes to authenticated users.
     * @path /products/{productSku}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update): if isSignedIn()
     * @allow (delete): if isSignedIn()
     * @deny (create): if false
     * @deny (update): if false
     * @deny (delete): if false
     * @principle Allows public read access to products, protected writes.
     */
    match /products/{productSku} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Restricts access to customer documents to the owner (user with matching UID).
     * @path /customers/{customerId}
     * @allow (get): if isOwner(customerId)
     * @allow (list): if false
     * @allow (create): if isOwner(customerId)
     * @allow (update): if isExistingOwner(customerId)
     * @allow (delete): if isExistingOwner(customerId)
     * @deny (create): if !isOwner(customerId)
     * @deny (get): if !isOwner(customerId)
     * @deny (update): if !isExistingOwner(customerId)
     * @deny (delete): if !isExistingOwner(customerId)
     * @principle Enforces document ownership for customer profiles.
     */
    match /customers/{customerId} {
      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Restricts access to sales documents to the owner (customer with matching UID).
     * @path /customers/{customerId}/sales/{saleId}
     * @allow (get): if isOwner(customerId)
     * @allow (list): if isOwner(customerId)
     * @allow (create): if isOwner(customerId)
     * @allow (update): if isExistingOwner(customerId)
     * @allow (delete): if isExistingOwner(customerId)
     * @deny (create): if !isOwner(customerId)
     * @deny (get): if !isOwner(customerId)
     * @deny (list): if !isOwner(customerId)
     * @deny (update): if !isExistingOwner(customerId)
     * @deny (delete): if !isExistingOwner(customerId)
     * @principle Enforces document ownership for sales transactions.
     */
    match /customers/{customerId}/sales/{saleId} {
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows access to expense documents to signed-in users only.
     * @path /expenses/{expenseId}
     * @allow (get): if isSignedIn()
     * @allow (list): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update): if isSignedIn() && resource != null;
     * @allow (delete): if isSignedIn() && resource != null;
     * @deny (create): if !isSignedIn()
     * @deny (get): if !isSignedIn()
     * @deny (list): if !isSignedIn()
     * @deny (update): if !isSignedIn()
     * @deny (delete): if !isSignedIn()
     * @principle Restricts access to expenses to authenticated users.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to setting documents to signed-in users only.
     * @path /settings/{settingId}
     * @allow (get): if isSignedIn()
     * @allow (list): if false
     * @allow (create): if isSignedIn()
     * @allow (update): if isSignedIn() && resource != null;
     * @allow (delete): if isSignedIn() && resource != null;
     * @deny (create): if !isSignedIn()
     * @deny (get): if !isSignedIn()
     * @deny (update): if !isSignedIn()
     * @deny (delete): if !isSignedIn()
     * @principle Restricts access to settings to authenticated users.
     */
    match /settings/{settingId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}