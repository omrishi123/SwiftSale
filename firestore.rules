/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for shop data. Each shop is owned by a specific user,
 * and only that user can create, read, update, or delete data associated with their shop. All data is nested
 * under /shops/{shopId}, where shopId is the Firebase Auth UID of the shop owner.
 *
 * Data Structure:
 * - /shops/{shopId}: Shop details, where shopId is the owner's UID.
 * - /shops/{shopId}/products/{productId}: Products belonging to the shop.
 * - /shops/{shopId}/customers/{customerId}: Customers of the shop.
 * - /shops/{shopId}/sales/{saleId}: Sales transactions for the shop.
 * - /shops/{shopId}/expenses/{expenseId}: Expenses of the shop.
 *
 * Key Security Decisions:
 * - User ownership is enforced at the root level (/shops/{shopId}).
 * - Subcollections inherit the ownership of their parent shop.
 * - No public listing is allowed for any collections. Only the owner can list data.
 *
 * Denormalization for Authorization:
 * - The shopId is derived from the path itself (/shops/{shopId}), eliminating the need for get() calls
 *   to verify shop ownership. All subcollections inherit this ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for /shops/{shopId}
     * Allows the shop owner to read, create, update, and delete their own shop data.
     * @path /shops/{shopId}
     * @allow (create) - Authenticated user with UID matching shopId can create a shop.
     * @allow (get, update, delete) - Authenticated user with UID matching shopId can get, update, or delete the shop.
     * @deny (create, get, update, delete) - Authenticated user with UID not matching shopId cannot create, get, update, or delete the shop.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false; //Prevent listing all shops

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for /shops/{shopId}/products/{productId}
     * Allows the shop owner to read, create, update, and delete products within their shop.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) - Shop owner can create a product.
     * @allow (get, update, delete) - Shop owner can get, update, or delete a product.
     * @deny (create, get, update, delete) - Non-shop owner cannot create, get, update, or delete a product.
     * @principle Enforces ownership inheritance and document existence for writes.
     */
    match /shops/{shopId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for /shops/{shopId}/customers/{customerId}
     * Allows the shop owner to read, create, update, and delete customers within their shop.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) - Shop owner can create a customer.
     * @allow (get, update, delete) - Shop owner can get, update, or delete a customer.
     * @deny (create, get, update, delete) - Non-shop owner cannot create, get, update, or delete a customer.
     * @principle Enforces ownership inheritance and document existence for writes.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for /shops/{shopId}/sales/{saleId}
     * Allows the shop owner to read, create, update, and delete sales within their shop.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) - Shop owner can create a sale.
     * @allow (get, update, delete) - Shop owner can get, update, or delete a sale.
     * @deny (create, get, update, delete) - Non-shop owner cannot create, get, update, or delete a sale.
     * @principle Enforces ownership inheritance and document existence for writes.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for /shops/{shopId}/expenses/{expenseId}
     * Allows the shop owner to read, create, update, and delete expenses within their shop.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) - Shop owner can create an expense.
     * @allow (get, update, delete) - Shop owner can get, update, or delete an expense.
     * @deny (create, get, update, delete) - Non-shop owner cannot create, get, update, or delete an expense.
     * @principle Enforces ownership inheritance and document existence for writes.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for /users/{userId}/appData/{docId}
     * Allows each signed-in user to read/write their own app data.
     */
    match /users/{userId}/appData/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // âœ… Allow user to fully access only their own appData
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}