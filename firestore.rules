/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, identified by their Firebase Auth UID. All data related to a shop is nested under the /shops/{shopId} path, where {shopId} is the user's UID.
 *
 * Data Structure:
 * - /shops/{shopId}: Shop information. {shopId} must match the authenticated user's UID.
 * - /shops/{shopId}/products/{productId}: Products belonging to the shop.
 * - /shops/{shopId}/customers/{customerId}: Customers of the shop.
 * - /shops/{shopId}/sales/{saleId}: Sales transactions for the shop.
 * - /shops/{shopId}/expenses/{expenseId}: Expenses incurred by the shop.
 *
 * Key Security Decisions:
 * - User ownership is strictly enforced for all write operations.
 * - List operations are allowed only for the owner of a shop's subcollections.
 * - Data consistency between the path and document data is enforced on create and update operations to maintain relational integrity.
 * - Shop settings are managed at the root shop document level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the shop owner to read and write their shop data.
     * @path /shops/{shopId}
     * @allow (create) User with UID 'user_abc' can create a shop document where shopId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a shop document where shopId == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a shop document where shopId == 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a shop document where shopId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a shop document where shopId == 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a shop document where shopId == 'user_abc'.
     * @principle Enforces document ownership for writes. Validates relational integrity between path and document data.
     */
    match /shops/{shopId} {
      //  shopId is the Firebase Auth UID of the shop owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if true;
      allow list: if false; // No listing of shops

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User with UID 'user_abc' can create a product in /shops/user_abc/products.
     * @deny (create) User with UID 'user_xyz' cannot create a product in /shops/user_abc/products.
     * @allow (update) User with UID 'user_abc' can update a product in /shops/user_abc/products.
     * @deny (update) User with UID 'user_xyz' cannot update a product in /shops/user_abc/products.
     * @allow (delete) User with UID 'user_abc' can delete a product in /shops/user_abc/products.
     * @deny (delete) User with UID 'user_xyz' cannot delete a product in /shops/user_abc/products.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /shops/{shopId}/products/{productId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User with UID 'user_abc' can create a customer in /shops/user_abc/customers.
     * @deny (create) User with UID 'user_xyz' cannot create a customer in /shops/user_abc/customers.
     * @allow (update) User with UID 'user_abc' can update a customer in /shops/user_abc/customers.
     * @deny (update) User with UID 'user_xyz' cannot update a customer in /shops/user_abc/customers.
     * @allow (delete) User with UID 'user_abc' can delete a customer in /shops/user_abc/customers.
     * @deny (delete) User with UID 'user_xyz' cannot delete a customer in /shops/user_abc/customers.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their sales data.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User with UID 'user_abc' can create a sale in /shops/user_abc/sales.
     * @deny (create) User with UID 'user_xyz' cannot create a sale in /shops/user_abc/sales.
     * @allow (update) User with UID 'user_abc' can update a sale in /shops/user_abc/sales.
     * @deny (update) User with UID 'user_xyz' cannot update a sale in /shops/user_abc/sales.
     * @allow (delete) User with UID 'user_abc' can delete a sale in /shops/user_abc/sales.
     * @deny (delete) User with UID 'user_xyz' cannot delete a sale in /shops/user_abc/sales.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense in /shops/user_abc/expenses.
     * @deny (create) User with UID 'user_xyz' cannot create an expense in /shops/user_abc/expenses.
     * @allow (update) User with UID 'user_abc' can update an expense in /shops/user_abc/expenses.
     * @deny (update) User with UID 'user_xyz' cannot update an expense in /shops/user_abc/expenses.
     * @allow (delete) User with UID 'user_abc' can delete an expense in /shops/user_abc/expenses.
     * @deny (delete) User with UID 'user_xyz' cannot delete an expense in /shops/user_abc/expenses.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

     /**
      * @description Allows the shop owner to manage their shop settings.
      * @path /shops/{shopId}/settings/shopSettings
      * @allow (update) User with UID 'user_abc' can update settings in /shops/user_abc/settings/shopSettings.
      * @deny (update) User with UID 'user_xyz' cannot update settings in /shops/user_abc/settings/shopSettings.
      * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
      */
     match /shops/{shopId}/settings/shopSettings {
        function isOwner(shopId) {
          return request.auth != null && request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if false;

        allow create: if false;
        allow update: if isExistingOwner(shopId);
        allow delete: if false;
     }
  }
}