rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to shop documents.
     * @path /shops/{shopId}
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId && existsAfter(/databases/$(database)/documents/shops/$(shopId));
      }

      allow get: if isExistingOwner(shopId);
      allow list: if false; // Listing all shops is not permitted.
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to product documents within a shop.
     * @path /shops/{shopId}/products/{productId}
     */
    match /shops/{shopId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId && existsAfter(/databases/$(database)/documents/shops/$(shopId));
      }

      allow get: if isExistingOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to customer documents within a shop.
     * @path /shops/{shopId}/customers/{customerId}
     */
    match /shops/{shopId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId && existsAfter(/databases/$(database)/documents/shops/$(shopId));
      }

      allow get: if isExistingOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to sales documents within a shop.
     * @path /shops/{shopId}/sales/{saleId}
     */
    match /shops/{shopId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId && existsAfter(/databases/$(database)/documents/shops/$(shopId));
      }

      allow get: if isExistingOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to expense documents within a shop.
     * @path /shops/{shopId}/expenses/{expenseId}
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId && existsAfter(/databases/$(database)/documents/shops/$(shopId));
      }

      allow get: if isExistingOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}