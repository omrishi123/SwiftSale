/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, and only that user can create, read, update, or delete data within their shop.
 * @data-structure All data is nested under /shops/{shopId}, where shopId corresponds to the Firebase Auth UID of the shop owner. This structure ensures clear ownership and simplifies security rules.
 * @key-security-decisions
 *   - All data is owned by the user (shop owner).
 *   - Listing of shops is not allowed to prevent unauthorized discovery of shop IDs.
 *   - Data consistency is enforced by validating that the shopId in the path matches the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if user is signed in
     * @allow if request.auth != null
     * @deny if request.auth == null
     * @principle Defines if user is signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the shop (i.e., their UID matches the shopId).
     * @param {string} shopId - The shop ID to check against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     * @principle Enforces shop ownership.
     */
    function isOwner(shopId) {
      return request.auth.uid == shopId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the shop and the resource exists.
     * @param {string} shopId - The shop ID to check against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     * @principle Enforces shop ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(shopId) {
      return isOwner(shopId) && resource != null;
    }

    /**
     * @description Security rules for the /shops/{shopId} collection.
     * @path /shops/{shopId}
     * @allow (create) - User with UID 'user123' can create a shop if shopId is 'user123'.
     * @allow (get) - User with UID 'user123' can get a shop if shopId is 'user123'.
     * @allow (update) - User with UID 'user123' can update a shop if shopId is 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a shop if shopId is 'user123'.
     * @deny  (create) - User with UID 'user123' cannot create a shop if shopId is 'user456'.
     * @deny  (get) - User with UID 'user123' cannot get a shop if shopId is 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update a shop if shopId is 'user456'.
     * @deny  (delete) - User with UID 'user123' cannot delete a shop if shopId is 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      //Read Rules
      allow get: if isOwner(shopId);
      allow list: if false;

      //Write Rules
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Security rules for the /shops/{shopId}/products/{productId} collection.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) - User with UID 'user123' can create a product in shop 'user123'.
     * @allow (get) - User with UID 'user123' can get a product in shop 'user123'.
     * @allow (update) - User with UID 'user123' can update a product in shop 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a product in shop 'user123'.
     * @deny  (create) - User with UID 'user123' cannot create a product in shop 'user456'.
     * @deny  (get) - User with UID 'user123' cannot get a product in shop 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update a product in shop 'user456'.
     * @deny  (delete) - User with UID 'user123' cannot delete a product in shop 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/products/{productId} {
      //Read Rules
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      //Write Rules
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Security rules for the /shops/{shopId}/customers/{customerId} collection.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) - User with UID 'user123' can create a customer in shop 'user123'.
     * @allow (get) - User with UID 'user123' can get a customer in shop 'user123'.
     * @allow (update) - User with UID 'user123' can update a customer in shop 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a customer in shop 'user123'.
     * @deny  (create) - User with UID 'user123' cannot create a customer in shop 'user456'.
     * @deny  (get) - User with UID 'user123' cannot get a customer in shop 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update a customer in shop 'user456'.
     * @deny  (delete) - User with UID 'user123' cannot delete a customer in shop 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/customers/{customerId} {
      //Read Rules
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      //Write Rules
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Security rules for the /shops/{shopId}/sales/{saleId} collection.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) - User with UID 'user123' can create a sale in shop 'user123'.
     * @allow (get) - User with UID 'user123' can get a sale in shop 'user123'.
     * @allow (update) - User with UID 'user123' can update a sale in shop 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a sale in shop 'user123'.
     * @deny  (create) - User with UID 'user123' cannot create a sale in shop 'user456'.
     * @deny  (get) - User with UID 'user123' cannot get a sale in shop 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update a sale in shop 'user456'.
     * @deny  (delete) - User with UID 'user123' cannot delete a sale in shop 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/sales/{saleId} {
      //Read Rules
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      //Write Rules
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Security rules for the /shops/{shopId}/expenses/{expenseId} collection.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense in shop 'user123'.
     * @allow (get) - User with UID 'user123' can get an expense in shop 'user123'.
     * @allow (update) - User with UID 'user123' can update an expense in shop 'user123'.
     * @allow (delete) - User with UID 'user123' can delete an expense in shop 'user123'.
     * @deny  (create) - User with UID 'user123' cannot create an expense in shop 'user456'.
     * @deny  (get) - User with UID 'user123' cannot get an expense in shop 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update an expense in shop 'user456'.
     * @deny  (delete) - User with UID 'user123' cannot delete an expense in shop 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      //Read Rules
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      //Write Rules
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Security rules for the /shops/{shopId}/settings/shopSettings document.
     * @path /shops/{shopId}/settings/shopSettings
     * @allow (get) - User with UID 'user123' can get shop settings in shop 'user123'.
     * @allow (update) - User with UID 'user123' can update shop settings in shop 'user123'.
     * @deny  (get) - User with UID 'user123' cannot get shop settings in shop 'user456'.
     * @deny  (update) - User with UID 'user123' cannot update shop settings in shop 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/settings/shopSettings {
      //Read Rules
      allow get: if isOwner(shopId);

      //Write Rules
      allow create: if false;
      allow update: if isExistingOwner(shopId);
      allow delete: if false;
      allow list: if false;
    }
  }
}