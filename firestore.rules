/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses).
 *
 * Data Structure:
 * - /shops/{shopId}: Stores shop information. shopId corresponds to the Firebase Auth UID of the shop owner.
 * - /shops/{shopId}/products/{productId}: Stores product information for a shop.
 * - /shops/{shopId}/customers/{customerId}: Stores customer information for a shop.
 * - /shops/{shopId}/sales/{saleId}: Stores sales transaction data for a shop.
 * - /shops/{shopId}/expenses/{expenseId}: Stores expense data for a shop.
 *
 * Key Security Decisions:
 * - User-ownership: Only the shop owner (identified by their UID) can create, read, update, or delete shop data.
 * - No public listing: Listing of shops or any shop-owned data is restricted to the shop owner.
 * - Data Denormalization: The shopId is implicitly available in the path, so documents don't need to duplicate it.
 * - Prototyping Philosophy: The rules prioritize strict authorization and relational integrity, while remaining flexible on data shapes for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to shop documents. Only the shop owner can create, read, update, or delete their shop data.
     * @path /shops/{shopId}
     * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create a shop document where shopId == request.auth.uid
     * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get the shop document where shopId == request.auth.uid.
     * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update the shop document where shopId == request.auth.uid.
     * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete the shop document where shopId == request.auth.uid.
     * @deny (create) User with UID 'randomId' cannot create a shop document where shopId != request.auth.uid.
     * @principle Enforces document ownership for all operations on shop documents.
     */
    match /shops/{shopId} {
      // Helper function to check if the request is from the owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false;
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to product documents within a shop. Only the shop owner can create, read, update, or delete product data.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create a product document under their shop.
     * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get a product document under their shop.
     * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update a product document under their shop.
     * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete a product document under their shop.
     * @deny (create) User with UID 'randomId' cannot create a product document under another shop.
     * @principle Enforces document ownership for all operations on product documents.
     */
    match /shops/{shopId}/products/{productId} {
      // Helper function to check if the request is from the shop owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to customer documents within a shop. Only the shop owner can create, read, update, or delete customer data.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create a customer document under their shop.
     * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get a customer document under their shop.
     * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update a customer document under their shop.
     * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete a customer document under their shop.
     * @deny (create) User with UID 'randomId' cannot create a customer document under another shop.
     * @principle Enforces document ownership for all operations on customer documents.
     */
    match /shops/{shopId}/customers/{customerId} {
      // Helper function to check if the request is from the shop owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to sales documents within a shop. Only the shop owner can create, read, update, or delete sales data.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create a sale document under their shop.
     * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get a sale document under their shop.
     * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update a sale document under their shop.
     * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete a sale document under their shop.
     * @deny (create) User with UID 'randomId' cannot create a sale document under another shop.
     * @principle Enforces document ownership for all operations on sale documents.
     */
    match /shops/{shopId}/sales/{saleId} {
      // Helper function to check if the request is from the shop owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Manages access to expense documents within a shop. Only the shop owner can create, read, update, or delete expense data.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create an expense document under their shop.
     * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get an expense document under their shop.
     * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update an expense document under their shop.
     * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete an expense document under their shop.
     * @deny (create) User with UID 'randomId' cannot create an expense document under another shop.
     * @principle Enforces document ownership for all operations on expense documents.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      // Helper function to check if the request is from the shop owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

     /**
      * @description Manages access to shop settings documents. Only the shop owner can create, read, update, or delete their shop settings data.
      * @path /shops/{shopId}/settings/{settingsId}
      * @allow (create) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can create a shop settings document where shopId == request.auth.uid
      * @allow (get) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can get the shop settings document where shopId == request.auth.uid.
      * @allow (update) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can update the shop settings document where shopId == request.auth.uid.
      * @allow (delete) User with UID 'ZBW3wlaHYPgZ0SdbIvgML5xVTKH2' can delete the shop settings document where shopId == request.auth.uid.
      * @deny (create) User with UID 'randomId' cannot create a shop settings document where shopId != request.auth.uid.
      * @principle Enforces document ownership for all operations on shop settings documents.
      */
     match /shops/{shopId}/settings/{settingsId} {
      // Helper function to check if the request is from the owner.
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }

      // Helper function to check if the shop exists and the request is from the owner.
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false;
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}