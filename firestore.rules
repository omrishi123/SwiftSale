/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, and only that user can manage the shop's data.
 * @dataStructure
 *   /shops/{shopId}: Shop information, where shopId is the user's UID.
 *   /shops/{shopId}/products/{productId}: Products belonging to a shop.
 *   /shops/{shopId}/customers/{customerId}: Customers of a shop.
 *   /shops/{shopId}/sales/{saleId}: Sales transactions for a shop.
 *   /shops/{shopId}/expenses/{expenseId}: Expenses for a shop.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All write operations are restricted to the shop owner.
 *   - Data is denormalized to avoid costly `get()` calls in rules. The shopId is derived directly from the path.
 * @denormalizationForAuthorization
 *   - The shopId is obtained from the path, eliminating the need to read the shop document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the shop owner to read and write their shop information.
     * @path /shops/{shopId}
     * @allow (get, list) if isSignedIn() && isOwner(shopId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(shopId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(shopId)
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      allow get: if isSignedIn() && isOwner(shopId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(shopId);
      allow update: if isSignedIn() && isOwner(shopId);
      allow delete: if isSignedIn() && isOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (get, list) if isSignedIn() && isOwner(shopId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(shopId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(shopId)
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/products/{productId} {
      allow get: if isSignedIn() && isOwner(shopId);
      allow list: if isSignedIn() && isOwner(shopId);
      allow create: if isSignedIn() && isOwner(shopId);
      allow update: if isSignedIn() && isOwner(shopId);
      allow delete: if isSignedIn() && isOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (get, list) if isSignedIn() && isOwner(shopId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(shopId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(shopId)
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/customers/{customerId} {
      allow get: if isSignedIn() && isOwner(shopId);
      allow list: if isSignedIn() && isOwner(shopId);
      allow create: if isSignedIn() && isOwner(shopId);
      allow update: if isSignedIn() && isOwner(shopId);
      allow delete: if isSignedIn() && isOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage sales transactions.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (get, list) if isSignedIn() && isOwner(shopId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(shopId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(shopId)
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/sales/{saleId} {
      allow get: if isSignedIn() && isOwner(shopId);
      allow list: if isSignedIn() && isOwner(shopId);
      allow create: if isSignedIn() && isOwner(shopId);
      allow update: if isSignedIn() && isOwner(shopId);
      allow delete: if isSignedIn() && isOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (get, list) if isSignedIn() && isOwner(shopId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(shopId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(shopId)
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(shopId);
      allow list: if isSignedIn() && isOwner(shopId);
      allow create: if isSignedIn() && isOwner(shopId);
      allow update: if isSignedIn() && isOwner(shopId);
      allow delete: if isSignedIn() && isOwner(shopId);
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(shopId) {
    return request.auth.uid == shopId;
  }
}