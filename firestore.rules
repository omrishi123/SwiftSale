/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses).
 * All data is nested under /shops/{shopId}, where shopId MUST match the Firebase Auth UID of the shop owner.
 *
 * Data Structure:
 * - /shops/{shopId}: Shop information. The shopId must match the user's UID.
 * - /shops/{shopId}/products/{productId}: Products belonging to a shop.
 * - /shops/{shopId}/customers/{customerId}: Customers of a shop.
 * - /shops/{shopId}/sales/{saleId}: Sales transactions for a shop.
 * - /shops/{shopId}/expenses/{expenseId}: Expenses incurred by a shop.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Strict ownership is enforced for all write operations.
 *
 * Denormalization for Authorization:
 * - The shopId is derived from the path, eliminating the need for 'get()' calls to verify shop ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a shop owner to manage their shop information.
     * @path /shops/{shopId}
     * @allow (create) User with UID 'shopId' can create their shop.
     * @allow (get, update, delete) User with UID 'shopId' can access and modify their shop information.
     * @deny (create) User with UID != 'shopId' cannot create a shop for another user.
     * @deny (get, update, delete) User with UID != 'shopId' cannot access or modify another user's shop information.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows a shop owner to manage their products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User with UID 'shopId' can create products for their shop.
     * @allow (get, list, update, delete) User with UID 'shopId' can access and modify their shop's products.
     * @deny (create) User with UID != 'shopId' cannot create products for another user's shop.
     * @deny (get, list, update, delete) User with UID != 'shopId' cannot access or modify products in another user's shop.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/products/{productId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(shopId) {
          return request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if isOwner(shopId);
        allow create: if isOwner(shopId);
        allow update: if isExistingOwner(shopId);
        allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows a shop owner to manage their customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User with UID 'shopId' can create customers for their shop.
     * @allow (get, list, update, delete) User with UID 'shopId' can access and modify their shop's customers.
     * @deny (create) User with UID != 'shopId' cannot create customers for another user's shop.
     * @deny (get, list, update, delete) User with UID != 'shopId' cannot access or modify customers in another user's shop.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/customers/{customerId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(shopId) {
          return request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if isOwner(shopId);
        allow create: if isOwner(shopId);
        allow update: if isExistingOwner(shopId);
        allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows a shop owner to manage their sales transactions.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User with UID 'shopId' can create sales transactions for their shop.
     * @allow (get, list, update, delete) User with UID 'shopId' can access and modify their shop's sales transactions.
     * @deny (create) User with UID != 'shopId' cannot create sales transactions for another user's shop.
     * @deny (get, list, update, delete) User with UID != 'shopId' cannot access or modify sales transactions in another user's shop.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/sales/{saleId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(shopId) {
          return request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if isOwner(shopId);
        allow create: if isOwner(shopId);
        allow update: if isExistingOwner(shopId);
        allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows a shop owner to manage their expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User with UID 'shopId' can create expenses for their shop.
     * @allow (get, list, update, delete) User with UID 'shopId' can access and modify their shop's expenses.
     * @deny (create) User with UID != 'shopId' cannot create expenses for another user's shop.
     * @deny (get, list, update, delete) User with UID != 'shopId' cannot access or modify expenses in another user's shop.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/expenses/{expenseId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(shopId) {
          return request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if isOwner(shopId);
        allow create: if isOwner(shopId);
        allow update: if isExistingOwner(shopId);
        allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows a shop owner to manage their shop settings.
     * @path /shops/{shopId}/settings/shopSettings
     * @allow (create) User with UID 'shopId' can create settings for their shop.
     * @allow (get, update, delete) User with UID 'shopId' can access and modify their shop settings.
     * @deny (create) User with UID != 'shopId' cannot create settings for another user's shop.
     * @deny (get, update, delete) User with UID != 'shopId' cannot access or modify settings in another user's shop.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/settings/shopSettings {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(shopId) {
          return request.auth.uid == shopId;
        }

        function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
        }

        allow get: if isOwner(shopId);
        allow list: if false;
        allow create: if isOwner(shopId);
        allow update: if isExistingOwner(shopId);
        allow delete: if isExistingOwner(shopId);
    }
  }
}