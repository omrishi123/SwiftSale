/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, and only that user can create, read, update, or delete data within their shop's data tree.
 *
 * Data Structure:
 * All data is nested under /shops/{shopId}, where shopId is the Firebase Auth UID of the shop owner.
 *
 * Key Security Decisions:
 * - Strict Ownership: Only the authenticated user who owns the shop can access its data.
 * - No User Listing: Listing of all users is disallowed.
 * - Data Denormalization: Ownership is verified via path-based authorization (`shopId` is derived from `request.auth.uid`).
 *   This avoids `get()` calls to other documents to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces shop ownership: only the authenticated user who owns the shop can manage it.
     * @path /shops/{shopId}
     * @allow (create) User with UID 'user_abc' can create a shop document where shopId == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, or delete the shop document where shopId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a shop document where shopId == 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete the shop document where shopId == 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false; // Listing all shops is disallowed

      // Allow a user to create their own shop document.
      allow create: if isOwner(shopId);

      // Allow the owner to update and delete their shop document, but only if it exists.
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces product ownership within a shop: only the shop owner can manage products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User with UID 'user_abc' can create a product in shop 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, or delete products in shop 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a product in shop 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete a product in shop 'user_abc'.
     * @principle Enforces shop ownership for product management.
     */
    match /shops/{shopId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces customer ownership within a shop: only the shop owner can manage customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User with UID 'user_abc' can create a customer in shop 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, or delete customers in shop 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a customer in shop 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete a customer in shop 'user_abc'.
     * @principle Enforces shop ownership for customer management.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces sale ownership within a shop: only the shop owner can manage sales.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User with UID 'user_abc' can create a sale in shop 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, or delete sales in shop 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a sale in shop 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete a sale in shop 'user_abc'.
     * @principle Enforces shop ownership for sale management.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces expense ownership within a shop: only the shop owner can manage expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense in shop 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, or delete expenses in shop 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an expense in shop 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete an expense in shop 'user_abc'.
     * @principle Enforces shop ownership for expense management.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}