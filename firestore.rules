/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, identified by their Firebase Auth UID. All data is nested under /shops/{shopId}, where shopId matches the user's UID.
 *
 * Data Structure:
 * - /shops/{shopId}: Shop information, where shopId is the owner's UID.
 * - /shops/{shopId}/products/{productId}: Products belonging to the shop.
 * - /shops/{shopId}/customers/{customerId}: Customers of the shop.
 * - /shops/{shopId}/sales/{saleId}: Sales transactions for the shop.
 * - /shops/{shopId}/expenses/{expenseId}: Expenses for the shop.
 *
 * Key Security Decisions:
 * - Only the owner of a shop can create, update, or delete shop data (products, customers, sales, expenses).
 * - Listing of shop data is restricted to the owner only.
 * - No public access is granted to any data.
 * - Data consistency is enforced by ensuring that the shopId in the path matches the owner's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Enforces owner-only access to shop data.
     * @path /shops/{shopId}
     * @allow (create) User with UID 'user_abc' can create a shop if shopId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a shop with shopId == user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId} {
      allow get: if isOwner(shopId);
      allow list: if false; //Prevent listing all shops.

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces owner-only access to product data.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User with UID 'user_abc' can create a product if shopId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a product under shop 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/products/{productId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces owner-only access to customer data.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User with UID 'user_abc' can create a customer if shopId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a customer under shop 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/customers/{customerId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces owner-only access to sales data.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User with UID 'user_abc' can create a sale if shopId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a sale under shop 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/sales/{saleId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Enforces owner-only access to expense data.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense if shopId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create an expense under shop 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}