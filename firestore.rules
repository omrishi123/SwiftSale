/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses).
 *
 * Data Structure:
 * - /shops/{shopId}: Stores shop information. The shopId MUST match the Firebase Auth UID of the shop owner.
 * - /shops/{shopId}/products/{productId}: Stores product information for a specific shop.
 * - /shops/{shopId}/customers/{customerId}: Stores customer information for a specific shop.
 * - /shops/{shopId}/sales/{saleId}: Stores sales transaction data for a specific shop.
 * - /shops/{shopId}/expenses/{expenseId}: Stores expense data for a specific shop.
 *
 * Key Security Decisions:
 * - Only the shop owner (identified by their Firebase Auth UID) can read or write data associated with their shop.
 * - No public listing of shops or their associated data is allowed.
 * - All write operations require the user to be authenticated.
 * - Relational integrity is enforced by validating the shopId in subcollections.
 *
 * Denormalization for Authorization:
 * - The shopId is derived from the path in all subcollections, eliminating the need for `get()` calls to verify shop ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the shop owner to read and write their shop information.
     * @path /shops/{shopId}
     * @allow (get, list, create, update, delete) if the request.auth.uid matches the shopId.
     * @deny (get, list, create, update, delete) if the request.auth.uid does not match the shopId.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false; // Listing shops is not allowed.
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (get, create, update, delete) if the request.auth.uid matches the shopId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the shopId.
     * @principle Enforces document ownership for writes, path consistency.
     */
    match /shops/{shopId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (get, create, update, delete) if the request.auth.uid matches the shopId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the shopId.
     * @principle Enforces document ownership for writes, path consistency.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their sales transactions.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (get, create, update, delete) if the request.auth.uid matches the shopId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the shopId.
     * @principle Enforces document ownership for writes, path consistency.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (get, create, update, delete) if the request.auth.uid matches the shopId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the shopId.
     * @principle Enforces document ownership for writes, path consistency.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}