/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for shops and all data associated with them. Each shop is owned by a specific user, and only that user can create, read, update, or delete data within their shop's data tree.
 * @data-structure All data is nested under /shops/{shopId}, where {shopId} corresponds to the Firebase Auth UID of the shop owner. This structure ensures clear ownership and simplifies security rules.
 * @key-security-decisions
 *   - User listing is disallowed to prevent information leakage.
 *   - All write operations require authentication and ownership validation.
 *   - The data structure denormalizes ownership by using the shopId from the path, avoiding the need for costly `get()` calls in the rules.
 *   - Public read access is not granted for any collection in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /shops/{shopId} collection, ensuring only the shop owner can manage their shop's data.
     * @path /shops/{shopId}
     * @allow (create) Authenticated user with UID 'user_abc' can create a shop document where shopId == 'user_abc'.
     * @allow (get) Authenticated user with UID 'user_abc' can read the shop document where shopId == 'user_abc'.
     * @allow (update) Authenticated user with UID 'user_abc' can update the shop document where shopId == 'user_abc'.
     * @allow (delete) Authenticated user with UID 'user_abc' can delete the shop document where shopId == 'user_abc'.
     * @deny (create) Authenticated user with UID 'user_xyz' cannot create a shop document where shopId == 'user_abc'.
     * @deny (get) Authenticated user with UID 'user_xyz' cannot read the shop document where shopId == 'user_abc'.
     * @deny (update) Authenticated user with UID 'user_xyz' cannot update the shop document where shopId == 'user_abc'.
     * @deny (delete) Authenticated user with UID 'user_xyz' cannot delete the shop document where shopId == 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /shops/{shopId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the shop
      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      allow get: if isOwner(shopId);
      allow list: if false;
      allow create: if isOwner(shopId);
      allow update: if isOwner(shopId);
      allow delete: if isOwner(shopId);
    }

    /**
     * @description Secures the /shops/{shopId}/products/{productId} collection, ensuring only the shop owner can manage their products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) Authenticated user with UID 'user_abc' can create a product document under shop 'user_abc'.
     * @allow (get) Authenticated user with UID 'user_abc' can read a product document under shop 'user_abc'.
     * @allow (update) Authenticated user with UID 'user_abc' can update a product document under shop 'user_abc'.
     * @allow (delete) Authenticated user with UID 'user_abc' can delete a product document under shop 'user_abc'.
     * @deny (create) Authenticated user with UID 'user_xyz' cannot create a product document under shop 'user_abc'.
     * @deny (get) Authenticated user with UID 'user_xyz' cannot read a product document under shop 'user_abc'.
     * @deny (update) Authenticated user with UID 'user_xyz' cannot update a product document under shop 'user_abc'.
     * @deny (delete) Authenticated user with UID 'user_xyz' cannot delete a product document under shop 'user_abc'.
     * @principle Enforces document ownership for writes; restricts reads to the owner.
     */
    match /shops/{shopId}/products/{productId} {
      // Reuse the isSignedIn() and isOwner() functions defined above
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the shop
      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isOwner(shopId);
      allow delete: if isOwner(shopId);
    }

    /**
     * @description Secures the /shops/{shopId}/customers/{customerId} collection, ensuring only the shop owner can manage their customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) Authenticated user with UID 'user_abc' can create a customer document under shop 'user_abc'.
     * @allow (get) Authenticated user with UID 'user_abc' can read a customer document under shop 'user_abc'.
     * @allow (update) Authenticated user with UID 'user_abc' can update a customer document under shop 'user_abc'.
     * @allow (delete) Authenticated user with UID 'user_abc' can delete a customer document under shop 'user_abc'.
     * @deny (create) Authenticated user with UID 'user_xyz' cannot create a customer document under shop 'user_abc'.
     * @deny (get) Authenticated user with UID 'user_xyz' cannot read a customer document under shop 'user_abc'.
     * @deny (update) Authenticated user with UID 'user_xyz' cannot update a customer document under shop 'user_abc'.
     * @deny (delete) Authenticated user with UID 'user_xyz' cannot delete a customer document under shop 'user_abc'.
     * @principle Enforces document ownership for writes; restricts reads to the owner.
     */
    match /shops/{shopId}/customers/{customerId} {
      // Reuse the isSignedIn() and isOwner() functions defined above
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the shop
      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isOwner(shopId);
      allow delete: if isOwner(shopId);
    }

    /**
     * @description Secures the /shops/{shopId}/sales/{saleId} collection, ensuring only the shop owner can manage their sales transactions.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) Authenticated user with UID 'user_abc' can create a sale document under shop 'user_abc'.
     * @allow (get) Authenticated user with UID 'user_abc' can read a sale document under shop 'user_abc'.
     * @allow (update) Authenticated user with UID 'user_abc' can update a sale document under shop 'user_abc'.
     * @allow (delete) Authenticated user with UID 'user_abc' can delete a sale document under shop 'user_abc'.
     * @deny (create) Authenticated user with UID 'user_xyz' cannot create a sale document under shop 'user_abc'.
     * @deny (get) Authenticated user with UID 'user_xyz' cannot read a sale document under shop 'user_abc'.
     * @deny (update) Authenticated user with UID 'user_xyz' cannot update a sale document under shop 'user_abc'.
     * @deny (delete) Authenticated user with UID 'user_xyz' cannot delete a sale document under shop 'user_abc'.
     * @principle Enforces document ownership for writes; restricts reads to the owner.
     */
    match /shops/{shopId}/sales/{saleId} {
      // Reuse the isSignedIn() and isOwner() functions defined above
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the shop
      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isOwner(shopId);
      allow delete: if isOwner(shopId);
    }

    /**
     * @description Secures the /shops/{shopId}/expenses/{expenseId} collection, ensuring only the shop owner can manage their expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) Authenticated user with UID 'user_abc' can create an expense document under shop 'user_abc'.
     * @allow (get) Authenticated user with UID 'user_abc' can read an expense document under shop 'user_abc'.
     * @allow (update) Authenticated user with UID 'user_abc' can update an expense document under shop 'user_abc'.
     * @allow (delete) Authenticated user with UID 'user_abc' can delete an expense document under shop 'user_abc'.
     * @deny (create) Authenticated user with UID 'user_xyz' cannot create an expense document under shop 'user_abc'.
     * @deny (get) Authenticated user with UID 'user_xyz' cannot read an expense document under shop 'user_abc'.
     * @deny (update) Authenticated user with UID 'user_xyz' cannot update an expense document under shop 'user_abc'.
     * @deny (delete) Authenticated user with UID 'user_xyz' cannot delete an expense document under shop 'user_abc'.
     * @principle Enforces document ownership for writes; restricts reads to the owner.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      // Reuse the isSignedIn() and isOwner() functions defined above
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the shop
      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isOwner(shopId);
      allow delete: if isOwner(shopId);
    }
  }
}