/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for shop data. Each shop is owned by a specific user, and only that user has full access to the shop's data, including products, customers, sales, and expenses.
 * @data_structure The data is organized hierarchically under /shops/{shopId}, where shopId corresponds to the Firebase Auth UID of the shop owner.  All data related to a shop (products, customers, sales, expenses) are stored as subcollections under this path.
 * @key_security_decisions Direct access to the /shops/{shopId} document is restricted to the shop owner (i.e., the user with the matching UID). All write operations on shop-related data (products, customers, sales, expenses) must be performed by the shop owner. List operations are allowed only within a user's own shop data.
 * @denormalization_for_authorization The shopId is implicitly known from the path, avoiding the need for 'get()' calls to verify shop ownership. The shopId is equivalent to the Firebase Auth UID.
 * @structural_segregation All shop-related data is stored under the /shops/{shopId} path, ensuring clear segregation and simplified security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(shopId) {
      return isSignedIn() && request.auth.uid == shopId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(shopId) {
      return isSignedIn() && request.auth.uid == shopId && resource != null;
    }

    /**
     * @description Rules for shop information.
     * @path /shops/{shopId}
     * @allow (create, update) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can create their shop.
     * @deny (create, update) User 'anotherUserId' cannot create shop for user 'dWy9zMH77BNuXRGvn7kLx95vW6l2'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId} {
      allow get: if isOwner(shopId);
      allow list: if false;
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for product inventory under a specific shop.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can create a product in their shop.
     * @allow (update) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can update their product.
     * @allow (get) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can get their product.
     * @allow (list) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can list their products.
     * @deny (create) User 'anotherUserId' cannot create a product for shop 'dWy9zMH77BNuXRGvn7kLx95vW6l2'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/products/{productId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for customer information under a specific shop.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can create a customer in their shop.
     * @allow (update) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can update their customer.
     * @allow (get) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can get their customer.
     * @allow (list) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can list their customers.
     * @deny (create) User 'anotherUserId' cannot create a customer for shop 'dWy9zMH77BNuXRGvn7kLx95vW6l2'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/customers/{customerId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for sales transactions under a specific shop.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can create a sale in their shop.
     * @allow (update) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can update their sale.
     * @allow (get) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can get their sale.
     * @allow (list) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can list their sales.
     * @deny (create) User 'anotherUserId' cannot create a sale for shop 'dWy9zMH77BNuXRGvn7kLx95vW6l2'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/sales/{saleId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Rules for expense details under a specific shop.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can create an expense in their shop.
     * @allow (update) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can update their expense.
     * @allow (get) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can get their expense.
     * @allow (list) User 'dWy9zMH77BNuXRGvn7kLx95vW6l2' can list their expenses.
     * @deny (create) User 'anotherUserId' cannot create an expense for shop 'dWy9zMH77BNuXRGvn7kLx95vW6l2'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}