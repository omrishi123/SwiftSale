/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a specific user, and only that user can create, read, update, or delete the shop or its data.
 * @dataStructure
 *   /shops/{shopId} - Shop information. The `shopId` MUST match the Firebase Auth UID of the shop owner.
 *   /shops/{shopId}/products/{productId} - Products belonging to the shop.
 *   /shops/{shopId}/customers/{customerId} - Customers of the shop.
 *   /shops/{shopId}/sales/{saleId} - Sales transactions for the shop.
 *   /shops/{shopId}/expenses/{expenseId} - Expenses for the shop.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All data is private and requires authentication.
 *   - Write operations are restricted to the shop owner.
 * @denormalizationForAuthorization
 *   - Shop ID is implicitly available from the path, avoiding `get()` calls for authorization.
 * @structuralSegregation
 *   - Data is segregated under the `/shops/{shopId}` path, ensuring that each shop and its associated data have a homogeneous security posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the shop owner to manage their shop information.
     * @path /shops/{shopId}
     * @allow (create) - User with UID 'user_abc' can create a shop document where `shopId` is 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read the shop document where `shopId` is 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update the shop document where `shopId` is 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete the shop document where `shopId` is 'user_abc'.
     * @deny (create) - User with UID 'user_def' cannot create a shop document where `shopId` is 'user_abc'.
     * @deny (get) - User with UID 'user_def' cannot read the shop document where `shopId` is 'user_abc'.
     * @deny (update) - User with UID 'user_def' cannot update the shop document where `shopId` is 'user_abc'.
     * @deny (delete) - User with UID 'user_def' cannot delete the shop document where `shopId` is 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if false;

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) - User with UID 'user_abc' can create a product document under `/shops/user_abc/products`.
     * @allow (get) - User with UID 'user_abc' can read a product document under `/shops/user_abc/products`.
     * @allow (update) - User with UID 'user_abc' can update a product document under `/shops/user_abc/products`.
     * @allow (delete) - User with UID 'user_abc' can delete a product document under `/shops/user_abc/products`.
     * @deny (create) - User with UID 'user_def' cannot create a product document under `/shops/user_abc/products`.
     * @deny (get) - User with UID 'user_def' cannot read a product document under `/shops/user_abc/products`.
     * @deny (update) - User with UID 'user_def' cannot update a product document under `/shops/user_abc/products`.
     * @deny (delete) - User with UID 'user_def' cannot delete a product document under `/shops/user_abc/products`.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their customers.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) - User with UID 'user_abc' can create a customer document under `/shops/user_abc/customers`.
     * @allow (get) - User with UID 'user_abc' can read a customer document under `/shops/user_abc/customers`.
     * @allow (update) - User with UID 'user_abc' can update a customer document under `/shops/user_abc/customers`.
     * @allow (delete) - User with UID 'user_abc' can delete a customer document under `/shops/user_abc/customers`.
     * @deny (create) - User with UID 'user_def' cannot create a customer document under `/shops/user_abc/customers`.
     * @deny (get) - User with UID 'user_def' cannot read a customer document under `/shops/user_abc/customers`.
     * @deny (update) - User with UID 'user_def' cannot update a customer document under `/shops/user_abc/customers`.
     * @deny (delete) - User with UID 'user_def' cannot delete a customer document under `/shops/user_abc/customers`.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their sales transactions.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) - User with UID 'user_abc' can create a sale document under `/shops/user_abc/sales`.
     * @allow (get) - User with UID 'user_abc' can read a sale document under `/shops/user_abc/sales`.
     * @allow (update) - User with UID 'user_abc' can update a sale document under `/shops/user_abc/sales`.
     * @allow (delete) - User with UID 'user_abc' can delete a sale document under `/shops/user_abc/sales`.
     * @deny (create) - User with UID 'user_def' cannot create a sale document under `/shops/user_abc/sales`.
     * @deny (get) - User with UID 'user_def' cannot read a sale document under `/shops/user_abc/sales`.
     * @deny (update) - User with UID 'user_def' cannot update a sale document under `/shops/user_abc/sales`.
     * @deny (delete) - User with UID 'user_def' cannot delete a sale document under `/shops/user_abc/sales`.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Allows the shop owner to manage their expenses.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user_abc' can create an expense document under `/shops/user_abc/expenses`.
     * @allow (get) - User with UID 'user_abc' can read an expense document under `/shops/user_abc/expenses`.
     * @allow (update) - User with UID 'user_abc' can update an expense document under `/shops/user_abc/expenses`.
     * @allow (delete) - User with UID 'user_abc' can delete an expense document under `/shops/user_abc/expenses`.
     * @deny (create) - User with UID 'user_def' cannot create an expense document under `/shops/user_abc/expenses`.
     * @deny (get) - User with UID 'user_def' cannot read an expense document under `/shops/user_abc/expenses`.
     * @deny (update) - User with UID 'user_def' cannot update an expense document under `/shops/user_abc/expenses`.
     * @deny (delete) - User with UID 'user_def' cannot delete an expense document under `/shops/user_abc/expenses`.
     * @principle Enforces document ownership for writes.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(shopId) {
        return isSignedIn() && request.auth.uid == shopId;
      }

      function isExistingOwner(shopId) {
          return isOwner(shopId) && resource != null;
      }

      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);

      allow create: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}