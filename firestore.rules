/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict ownership model for shops and their associated data (products, customers, sales, expenses). Each shop is owned by a user, and only that user can create, read, update, or delete data associated with their shop.
 * @data_structure Data is organized hierarchically under /shops/{shopId}, where {shopId} corresponds to the Firebase Auth UID of the shop owner.  Subcollections under each shop store products, customers, sales, and expenses.
 * @key_security_decisions List operations are allowed for shop owners to view their own data. Data validation is minimal in this prototyping phase, focusing primarily on ownership and relational integrity.
 * @denormalization_for_authorization The shopId is derived directly from the path, avoiding the need for additional reads to verify ownership.
 * @structural_segregation All data is private and requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to shop documents. Only the shop owner can create, read, update, or delete their shop document.
     * @path /shops/{shopId}
     * @allow (create) If the user's UID matches the shopId.
     * @allow (get) If the user's UID matches the shopId.
     * @allow (update) If the user's UID matches the shopId and the document exists.
     * @allow (delete) If the user's UID matches the shopId and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get) If the user is not the shop owner.
     * @deny (update) If the user is not the shop owner or the document does not exist.
     * @deny (delete) If the user is not the shop owner or the document does not exist.
     * @principle Enforces shop ownership.
     */
    match /shops/{shopId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }
      function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }
      allow create: if isOwner(shopId);
      allow get: if isOwner(shopId);
      allow list: if false;
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Controls access to product documents within a shop. Only the shop owner can create, read, update, or delete product documents.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) If the user's UID matches the shopId.
     * @allow (get) If the user's UID matches the shopId.
     * @allow (list) If the user's UID matches the shopId.
     * @allow (update) If the user's UID matches the shopId and the document exists.
     * @allow (delete) If the user's UID matches the shopId and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get) If the user is not the shop owner.
     * @deny (list) If the user is not the shop owner.
     * @deny (update) If the user is not the shop owner or the document does not exist.
     * @deny (delete) If the user is not the shop owner or the document does not exist.
     * @principle Enforces product ownership within a shop.
     */
    match /shops/{shopId}/products/{productId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }
       function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }
      allow create: if isOwner(shopId);
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Controls access to customer documents within a shop. Only the shop owner can create, read, update, or delete customer documents.
     * @path /shops/{shopId}/customers/{customerId}
     * @allow (create) If the user's UID matches the shopId.
     * @allow (get) If the user's UID matches the shopId.
     * @allow (list) If the user's UID matches the shopId.
     * @allow (update) If the user's UID matches the shopId and the document exists.
     * @allow (delete) If the user's UID matches the shopId and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get) If the user is not the shop owner.
     * @deny (list) If the user is not the shop owner.
     * @deny (update) If the user is not the shop owner or the document does not exist.
     * @deny (delete) If the user is not the shop owner or the document does not exist.
     * @principle Enforces customer ownership within a shop.
     */
    match /shops/{shopId}/customers/{customerId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }
       function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }
      allow create: if isOwner(shopId);
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Controls access to sale documents within a shop. Only the shop owner can create, read, update, or delete sale documents.
     * @path /shops/{shopId}/sales/{saleId}
     * @allow (create) If the user's UID matches the shopId.
     * @allow (get) If the user's UID matches the shopId.
     * @allow (list) If the user's UID matches the shopId.
     * @allow (update) If the user's UID matches the shopId and the document exists.
     * @allow (delete) If the user's UID matches the shopId and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get) If the user is not the shop owner.
     * @deny (list) If the user is not the shop owner.
     * @deny (update) If the user is not the shop owner or the document does not exist.
     * @deny (delete) If the user is not the shop owner or the document does not exist.
     * @principle Enforces sale ownership within a shop.
     */
    match /shops/{shopId}/sales/{saleId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }
       function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }
      allow create: if isOwner(shopId);
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }

    /**
     * @description Controls access to expense documents within a shop. Only the shop owner can create, read, update, or delete expense documents.
     * @path /shops/{shopId}/expenses/{expenseId}
     * @allow (create) If the user's UID matches the shopId.
     * @allow (get) If the user's UID matches the shopId.
     * @allow (list) If the user's UID matches the shopId.
     * @allow (update) If the user's UID matches the shopId and the document exists.
     * @allow (delete) If the user's UID matches the shopId and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get) If the user is not the shop owner.
     * @deny (list) If the user is not the shop owner.
     * @deny (update) If the user is not the shop owner or the document does not exist.
     * @deny (delete) If the user is not the shop owner or the document does not exist.
     * @principle Enforces expense ownership within a shop.
     */
    match /shops/{shopId}/expenses/{expenseId} {
      function isOwner(shopId) {
        return request.auth != null && request.auth.uid == shopId;
      }
       function isExistingOwner(shopId) {
        return isOwner(shopId) && resource != null;
      }
      allow create: if isOwner(shopId);
      allow get: if isOwner(shopId);
      allow list: if isOwner(shopId);
      allow update: if isExistingOwner(shopId);
      allow delete: if isExistingOwner(shopId);
    }
  }
}