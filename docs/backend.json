{
  "entities": {
    "Shop": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Shop",
      "type": "object",
      "description": "Represents the shop's information and settings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shop entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the shop."
        },
        "gstin": {
          "type": "string",
          "description": "GSTIN (Goods and Services Tax Identification Number) of the shop."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the shop."
        },
        "address": {
          "type": "string",
          "description": "Address of the shop."
        },
        "defaultTaxRate": {
          "type": "number",
          "description": "Default GST (Goods and Services Tax) rate applied in the shop, as a percentage."
        },
        "shopLogoUrl": {
          "type": "string",
          "description": "URL for the shop's logo image."
        },
        "shopSignatureUrl": {
          "type": "string",
          "description": "URL for the shop's signature image."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the stock.",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Stock Keeping Unit - Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "costPrice": {
          "type": "number",
          "description": "Cost price of the product."
        },
        "salePrice": {
          "type": "number",
          "description": "Sale price of the product."
        },
        "stock": {
          "type": "number",
          "description": "Current stock quantity of the product."
        },
        "reorderLevel": {
          "type": "number",
          "description": "Reorder level for the product - the minimum stock level at which a reorder should be triggered."
        }
      },
      "required": [
        "sku",
        "name",
        "costPrice",
        "salePrice",
        "stock",
        "reorderLevel"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the customer."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "Address of the customer."
        },
        "due": {
          "type": "number",
          "description": "Amount due from the customer."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sale."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Sale)"
        },
        "items": {
          "type": "array",
          "description": "List of items sold in this sale.",
          "items": {
            "type": "string"
          }
        },
        "profit": {
          "type": "number",
          "description": "Total profit from the sale."
        },
        "subtotal": {
          "type": "number",
          "description": "Subtotal amount of the sale (before discount and tax)."
        },
        "discount": {
          "type": "number",
          "description": "Discount amount applied to the sale."
        },
        "taxRate": {
          "type": "number",
          "description": "Tax rate applied to the sale."
        },
        "gstAmount": {
          "type": "number",
          "description": "GST (Goods and Services Tax) amount applied to the sale."
        },
        "grandTotal": {
          "type": "number",
          "description": "Grand total amount of the sale (after discount and tax)."
        },
        "amountPaid": {
          "type": "number",
          "description": "Amount paid by the customer for the sale."
        },
        "due": {
          "type": "number",
          "description": "Amount due from the customer for the sale."
        },
        "paymentMode": {
          "type": "string",
          "description": "Payment mode used for the sale (e.g., Cash, Card, UPI)."
        },
        "date": {
          "type": "string",
          "description": "Date of the sale.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "customerId",
        "items",
        "profit",
        "subtotal",
        "discount",
        "taxRate",
        "gstAmount",
        "grandTotal",
        "amountPaid",
        "due",
        "paymentMode",
        "date"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents a business expense.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "date": {
          "type": "string",
          "description": "Date of the expense.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "Title of the expense."
        },
        "category": {
          "type": "string",
          "description": "Category of the expense."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the expense."
        }
      },
      "required": [
        "id",
        "date",
        "title",
        "category",
        "amount"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/shops/{shopId}",
        "definition": {
          "entityName": "Shop",
          "schema": {
            "$ref": "#/backend/entities/Shop"
          },
          "description": "Stores shop information.  ShopId is the Firebase Auth UID of the shop owner.",
          "params": [
            {
              "name": "shopId",
              "description": "The Firebase Auth UID of the shop owner."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information for a specific shop.",
          "params": [
            {
              "name": "shopId",
              "description": "The ID of the shop."
            },
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information for a specific shop.",
          "params": [
            {
              "name": "shopId",
              "description": "The ID of the shop."
            },
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sales transaction data for a specific shop.",
          "params": [
            {
              "name": "shopId",
              "description": "The ID of the shop."
            },
            {
              "name": "saleId",
              "description": "The unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense data for a specific shop.",
          "params": [
            {
              "name": "shopId",
              "description": "The ID of the shop."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier for the expense."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and easily debuggable, following the core design principles and strategy mandates. It emphasizes authorization independence by denormalizing data to avoid hierarchical authorization dependencies. The structure segregates data based on security posture, using path-based ownership for private user data and standardizing on membership maps for collaborative data.  Explicit state modeling and predictable schema conventions further enhance clarity. This design supports secure list operations (QAPs) by ensuring that each collection has a homogeneous security posture, meaning rules are not filters.\n\n**Authorization Independence & Data Denormalization:**\nThe structure achieves authorization independence by avoiding `get()` calls in security rules. For instance, Shop-owned entities (Products, Sales, Expenses) are stored as subcollections under the `/shops/{shopId}` path. The shop ID is inherently known from the path itself. No `get()` calls are needed to verify shop ownership. \n\n**QAPs (Rules are not Filters):**\nEach top-level collection and subcollection has a clear, homogeneous security profile. This segregation prevents the need to filter data based on authorization rules, ensuring efficient and secure `list` operations.\n\n**Shop Settings:** Shop details are stored at `/shops/{shopId}`. This allows easy querying for shop information using the shop ID.\n\n**Products:** Products are stored in `/shops/{shopId}/products/{productId}`. This structure ensures that products are always associated with a shop, simplifying data access and security rules.\n\n**Customers:** Customers are stored in `/shops/{shopId}/customers/{customerId}`. This structure ensures that customers are always associated with a shop, simplifying data access and security rules.\n\n**Sales:** Sales data is stored in `/shops/{shopId}/sales/{saleId}`. The `saleId` acts as the unique identifier for each sale. Storing sales under the shop ensures easy querying of all sales for a given shop.\n\n**Expenses:** Expenses are stored in `/shops/{shopId}/expenses/{expenseId}`. This allows for efficient querying of expenses for a specific shop."
  }
}
