{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the inventory.",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Unique Stock Keeping Unit identifier for the product. Serves as the primary key.",
          "format": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "costPrice": {
          "type": "number",
          "description": "The cost price of the product."
        },
        "salePrice": {
          "type": "number",
          "description": "The price at which the product is sold."
        },
        "stock": {
          "type": "number",
          "description": "The current quantity of the product in stock."
        },
        "reorderLevel": {
          "type": "number",
          "description": "The minimum stock level at which a reorder should be triggered."
        }
      },
      "required": [
        "sku",
        "name",
        "costPrice",
        "salePrice",
        "stock",
        "reorderLevel"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer. Serves as the primary key."
        },
        "name": {
          "type": "string",
          "description": "Name of the customer."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "Address of the customer."
        },
        "due": {
          "type": "number",
          "description": "Outstanding balance owed by the customer."
        }
      },
      "required": [
        "id",
        "name",
        "due"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sale. Serves as the primary key."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Sale)"
        },
        "items": {
          "type": "array",
          "description": "Array of items included in the sale.",
          "items": {
            "type": "string"
          }
        },
        "profit": {
          "type": "number",
          "description": "The profit made from the sale."
        },
        "subtotal": {
          "type": "number",
          "description": "The total value of the sale before discount and tax."
        },
        "discount": {
          "type": "number",
          "description": "The discount applied to the sale."
        },
        "taxRate": {
          "type": "number",
          "description": "The tax rate applied to the sale."
        },
        "gstAmount": {
          "type": "number",
          "description": "The GST amount for the sale."
        },
        "grandTotal": {
          "type": "number",
          "description": "The total amount of the sale after discount and tax."
        },
        "amountPaid": {
          "type": "number",
          "description": "The amount paid by the customer."
        },
        "due": {
          "type": "number",
          "description": "The remaining balance owed by the customer for the sale."
        },
        "paymentMode": {
          "type": "string",
          "description": "The method of payment used for the sale."
        },
        "date": {
          "type": "string",
          "description": "The date of the sale.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "customerId",
        "items",
        "profit",
        "subtotal",
        "discount",
        "taxRate",
        "gstAmount",
        "grandTotal",
        "amountPaid",
        "due",
        "paymentMode",
        "date"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents a business expense.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense. Serves as the primary key."
        },
        "date": {
          "type": "string",
          "description": "The date the expense was incurred.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "A brief description of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category the expense belongs to."
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        }
      },
      "required": [
        "id",
        "date",
        "title",
        "category",
        "amount"
      ]
    },
    "Setting": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Setting",
      "type": "object",
      "description": "Represents application settings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the setting. Serves as the primary key."
        },
        "shopName": {
          "type": "string",
          "description": "Name of the shop."
        },
        "shopGstin": {
          "type": "string",
          "description": "GSTIN of the shop."
        },
        "shopPhone": {
          "type": "string",
          "description": "Phone number of the shop."
        },
        "shopAddress": {
          "type": "string",
          "description": "Address of the shop."
        },
        "defaultTax": {
          "type": "number",
          "description": "The default tax rate."
        }
      },
      "required": [
        "id"
      ]
    },
    "SaleItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SaleItem",
      "type": "object",
      "description": "Represents an item within a sale.",
      "properties": {
        "saleId": {
          "type": "string",
          "description": "Reference to Sale. (Relationship: Sale 1:N SaleItem)"
        },
        "productSku": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N SaleItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product sold in this sale item."
        },
        "salePrice": {
          "type": "number",
          "description": "The price at which the product was sold in this sale."
        }
      },
      "required": [
        "saleId",
        "productSku",
        "quantity",
        "salePrice"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/products/{productSku}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information using the product SKU as the document ID.",
          "params": [
            {
              "name": "productSku",
              "description": "The unique SKU of the product.  Serves as the document ID."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information. Each customer document is uniquely identified by customerId.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique ID of the customer."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sales transactions associated with a specific customer. Includes denormalized 'customerId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique ID of the customer."
            },
            {
              "name": "saleId",
              "description": "The unique ID of the sale transaction."
            }
          ]
        }
      },
      {
        "path": "/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records.  Each expense document is uniquely identified by expenseId.",
          "params": [
            {
              "name": "expenseId",
              "description": "The unique ID of the expense."
            }
          ]
        }
      },
      {
        "path": "/settings/{settingId}",
        "definition": {
          "entityName": "Setting",
          "schema": {
            "$ref": "#/backend/entities/Setting"
          },
          "description": "Stores application settings. There will only be one document in this collection.",
          "params": [
            {
              "name": "settingId",
              "description": "Id of the setting document. Should be a constant value."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable database for the SwiftSale Pro application. It prioritizes authorization independence to ensure robust security rules and atomic operations.  The structure employs structural segregation to maintain a homogeneous security posture within collections, simplifying security rule design and preventing accidental exposure of sensitive data.  Access modeling follows consistent patterns, utilizing path-based ownership for private user data and membership maps for collaborative scenarios where applicable.\n\n**Authorization Independence and QAPs:**\n\n*   **Customers:** The `sales` subcollection under each customer denormalizes the `customerId` from the parent `Customer` document into each `Sale` document. This enables direct querying and listing of sales associated with a specific customer without needing to `get()` the Customer document in rules, achieving authorization independence.  This directly supports the QAP for listing sales securely.\n\n*   **Products:** The `products` collection stores all product-related data. Since products are not user-specific, this segregation simplifies management and ensures a consistent security posture for all product documents.  Product SKUs are unique and serve as document IDs.\n\n*   **Settings:** Application settings are stored in a single `settings` document, which does not require granular access control. This is suitable for centralized configuration and management.\n\n*   **Expenses:** Expenses are managed at the root level and secured at the application level. Given the user auth context is sufficient to secure the entire `expenses` collection.\n\n*   **Sales:** Sales documents are stored as subcollections of `customers`, containing details about each sale. The `customerId` is denormalized into the `Sale` document to enable rules to validate write access using just the `request.auth.uid`.\n\nThis design adheres to the core principles of authorization independence, clarity of intent, DBAC, and QAPs, resulting in a secure and efficient data structure for the application."
  }
}